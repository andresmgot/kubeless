# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2
workflows:
  version: 2
  kubeless:
    jobs:
      - build
      - build_images:
          context: kubeless
          requires:
            - build
      - minikube:
          requires:
            - build
      - minikube_core_triggers:
          requires:
            - build
      - minikube_build_functions:
          requires:
            - build
      - minikube_kafka:
          requires:
            - build
      - minikube_nats:
          requires:
            - build
      - GKE:
          requires:
            - build
defaults: &defaults
  environment:
    # TODO: Restore bitnami/kubeless account
    CONTROLLER_IMAGE_NAME: andresmgot/kubeless-controller-manager
    BUILDER_IMAGE_NAME: andresmgot/function-image-builder
    KAFKA_CONTROLLER_IMAGE_NAME: andresmgot/kafka-trigger-controller
    NATS_CONTROLLER_IMAGE_NAME: andresmgot/nats-trigger-controller
    CGO_ENABLED: "0"
    TEST_DEBUG: "1"
    GKE_VERSION: 1.8.8-gke.0
    MINIKUBE_VERSION: v0.25.2
exports: &exports
  # It is not possible to resolve env vars in the environment section:
  # https://discuss.circleci.com/t/using-environment-variables-in-config-yml-not-working/14237
  run: |
    CONTROLLER_TAG=${CIRCLE_TAG:-build-$CIRCLE_WORKFLOW_ID}
    echo "export CONTROLLER_TAG=${CONTROLLER_TAG}" >> $BASH_ENV
    echo "export CONTROLLER_IMAGE=${CONTROLLER_IMAGE_NAME}:${CONTROLLER_TAG}" >> $BASH_ENV
    echo "export BUILDER_IMAGE=${BUILDER_IMAGE_NAME}:${CONTROLLER_TAG}" >> $BASH_ENV
    echo "export KAFKA_CONTROLLER_IMAGE=${KAFKA_CONTROLLER_IMAGE_NAME}:${CONTROLLER_TAG}" >> $BASH_ENV
    echo "export NATS_CONTROLLER_IMAGE=${NATS_CONTROLLER_IMAGE_NAME}:${CONTROLLER_TAG}" >> $BASH_ENV
    echo "export KUBECFG_JPATH=/go/src/github.com/kubeless/kubeless/ksonnet-lib" >> $BASH_ENV
    echo "export PATH=$(pwd)/bats/libexec:$PATH" >> $BASH_ENV
restore_workspace: &restore_workspace
  run: |
    make bootstrap
    sudo cp -r /tmp/go/bin/* /usr/local/bin/
    cp -r /tmp/go/src/github.com/kubeless/kubeless/*yaml .

jobs:
  build:
    <<: *defaults
    docker:
      - image: circleci/golang:1.9 
    working_directory: /go/src/github.com/kubeless/kubeless
    steps:
      - checkout
      - <<: *exports
      - run: make bootstrap
      - run: make VERSION=${CONTROLLER_TAG} binary
      # - run: make test
      # - run: make validation
      - run: make all-yaml
      - run: "sed -i.bak 's/:latest/'\":${CONTROLLER_TAG}\"'/g' kubeless.yaml"
      - run: "sed -i.bak 's/:latest/'\":${CONTROLLER_TAG}\"'/g' kubeless-non-rbac.yaml"
      - run: "sed -i.bak 's/:latest/'\":${CONTROLLER_TAG}\"'/g' kubeless-openshift.yaml"
      - run: "sed -i.bak 's/:latest/'\":${CONTROLLER_TAG}\"'/g' kafka-zookeeper.yaml"
      - run: "sed -i.bak 's/:latest/'\":${CONTROLLER_TAG}\"'/g' kafka-zookeeper-openshift.yaml"
      - run: "sed -i.bak 's/:latest/'\":${CONTROLLER_TAG}\"'/g' nats.yaml"
      # TODO: Remove this
      - run: "sed -i.bak 's/image: bitnami/image: andresmgot/g' kubeless.yaml"
      - run: "sed -i.bak 's/builder-image: kubeless/builder-image: andresmgot/g' kubeless.yaml"
      - run: "sed -i.bak 's/image: bitnami/image: andresmgot/g' kubeless-non-rbac.yaml"
      - run: "sed -i.bak 's/image: bitnami/image: andresmgot/g' nats.yaml"
      - run: "sed -i.bak 's/image: bitnami\\/kafka-trigger-controller/image: andresmgot\\/kafka-trigger-controller/g' kafka-zookeeper.yaml"
      - run: cat kubeless.yaml
      - persist_to_workspace:
          root: /go
          paths: 
            - bin
            - src/github.com/kubeless/kubeless/*yaml
  build_images:
    <<: *defaults
    docker:
      - image: circleci/golang:1.9 
    working_directory: /go/src/github.com/kubeless/kubeless
    steps:
      - setup_remote_docker
      - checkout
      - <<: *exports
      - run: make bootstrap
      - run: docker login -u="$DOCKER_USERNAME" -p="$DOCKER_PASSWORD"      
      - run: make controller-image CONTROLLER_IMAGE=$CONTROLLER_IMAGE
      - run: docker push $CONTROLLER_IMAGE
      - run: make kafka-controller-image KAFKA_CONTROLLER_IMAGE=$KAFKA_CONTROLLER_IMAGE
      - run: docker push $KAFKA_CONTROLLER_IMAGE
      - run: make nats-controller-image NATS_CONTROLLER_IMAGE=$NATS_CONTROLLER_IMAGE
      - run: docker push $NATS_CONTROLLER_IMAGE
      - run: make function-image-builder FUNCTION_IMAGE_BUILDER=$BUILDER_IMAGE
      - run: docker push $BUILDER_IMAGE

  minikube:
    <<: *defaults
    machine: true
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/go
      - <<: *exports
      - <<: *restore_workspace
      - run: ./script/integration-tests minikube deployment
      - run: ./script/integration-tests minikube basic
  minikube_core_triggers:
    <<: *defaults
    machine: true
    steps:
      - checkout
      - <<: *exports
      - attach_workspace:
          at: /tmp/go
      - <<: *restore_workspace
      - run: sudo apt-get update -y
      - run: sudo apt-get install -y apache2-utils
      - run: ./script/integration-tests minikube deployment
      - run: ./script/integration-tests minikube cronjob
      - run: ./script/integration-tests minikube http
  minikube_build_functions:
    <<: *defaults
    machine: true
    steps:
      - checkout
      - <<: *exports
      - attach_workspace:
          at: /tmp/go
      - <<: *restore_workspace
      - run: "echo '{\"host\": \"unix:///var/run/docker.sock\", \"storage-driver\": \"overlay2\", \"insecure-registries\" : [\"0.0.0.0/0\"]}' > /tmp/daemon.json"
      - run: sudo mv /tmp/daemon.json /etc/docker/daemon.json
      - run: sudo service docker restart
      - run: docker info
      - run: docker run -d -p 5000:5000 --restart=always --name registry -v /data/docker-registry:/var/lib/registry registry:2
      - run: "sed -i.bak 's/enable-build-step: \"false\"/enable-build-step: \"true\"/g' kubeless.yaml"
      - run: "sed -i.bak 's/function-registry-tls-verify: \"true\"/function-registry-tls-verify: \"false\"/g' kubeless.yaml"
      - run: ./script/integration-tests minikube deployment
      - run: ./script/integration-tests minikube prebuilt_functions
  minikube_kafka:
    <<: *defaults
    machine: true
    steps:
      - checkout
      - <<: *exports
      - attach_workspace:
          at: /tmp/go
      - <<: *restore_workspace
      - run: ./script/integration-tests minikube deployment
      - run: ./script/integration-tests minikube kafka
  minikube_nats:
    <<: *defaults
    machine: true
    steps:
      - checkout
      - <<: *exports
      - attach_workspace:
          at: /tmp/go
      - <<: *restore_workspace
      - run: ./script/integration-tests minikube deployment
      - run: ./script/integration-tests minikube nats
  GKE:
    <<: *defaults
    docker:
      - image: circleci/golang:1.9 
    steps:
      - checkout
      - <<: *exports
      - attach_workspace:
          at: /tmp/go
      - <<: *restore_workspace
      - run: echo "export ESCAPED_GKE_CLUSTER=$(echo ${GKE_CLUSTER}-${TRAVIS_BRANCH} | sed 's/[^a-z0-9-]//g')" >> $BASH_ENV
      - run: ./script/install-gcloud-and-start.sh $(pwd)
      - run: ./script/integration-tests gke_${GKE_PROJECT}_${ZONE}_${ESCAPED_GKE_CLUSTER} deployment
      - run: ./script/integration-tests gke_${GKE_PROJECT}_${ZONE}_${ESCAPED_GKE_CLUSTER} basic
      - run: ./script/integration-tests gke_${GKE_PROJECT}_${ZONE}_${ESCAPED_GKE_CLUSTER} cronjob
      - run: ./script/integration-tests gke_${GKE_PROJECT}_${ZONE}_${ESCAPED_GKE_CLUSTER} kafka
