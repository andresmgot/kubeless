# NOTE:
# It is necessary to first deploy a secret that minio will use
# for retrieving the username and password. To generate it
# execute:
# $ kubectl create secret generic minio-key --namespace kubeless --from-literal=accesskey=<username> --from-literal=secretkey=<password>
---
kind: Service
apiVersion: v1
metadata:
  name: minio
  namespace: kubeless
  labels:
    kubeless: minio
spec:
  selector:
    kubeless: minio
  ports:
    - port: 9000
      targetPort: 9000
      protocol: TCP
---
apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  name: minio
  namespace: kubeless
  labels:
    kubeless: minio
spec:
  serviceName: minio
  selector:
    matchLabels:
      kubeless: minio
  volumeClaimTemplates:
  - metadata:
      name: minio-storage
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: standard
      resources:
        requests:
          storage: 10Gi
  template:
    metadata:
      name: minio
      labels:
        kubeless: minio
      annotations:
        pod.beta.kubernetes.io/init-containers: '[
          {
            "name": "init-myservice",
            "image": "busybox",
            "command": ["mkdir", "-p", "/export/functions"],
            "volumeMounts": [{
              "name": "minio-storage",
              "mountPath": "/export"
            }]
          }
        ]'
    spec:
      initContainers:
        - name: init-myservice
          image: busybox
          command: ["mkdir", "-p", "/export/functions"]
          volumeMounts:
            - name: minio-storage
              mountPath: "/export"
      containers:
        - name: minio
          image: minio/minio:RELEASE.2017-02-16T01-47-30Z
          imagePullPolicy: Always
          command: ["minio"]
          args: ["server", "/export"]
          volumeMounts:
            - name: minio-storage
              mountPath: /export
          ports:
            - name: service
              containerPort: 9000
          env:
            - name: MINIO_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: minio-key
                  key: accesskey
            - name: MINIO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: minio-key
                  key: secretkey
          livenessProbe:
            tcpSocket:
              port: 9000
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
---
apiVersion: batch/v1
kind: Job
metadata:
  name: set-policy
  namespace: kubeless
spec:
  template:
    metadata:
      name:  set-policy
    spec:
      volumes:
        - name: keys
          secret:
            secretName: minio-key
      containers:
      - name:  set-policy
        image: minio/mc:RELEASE.2017-10-14T00-51-16Z
        command: ["sh", "-c"]
        args: [ "\
          env && \
          mc config host add minioserver http://$MINIO_SERVICE_HOST:$MINIO_SERVICE_PORT $(cat /minio-cred/accesskey) $(cat /minio-cred/secretkey) &&  \
          mc policy download minioserver/functions" ]
        volumeMounts:
          - name: keys
            mountPath: /minio-cred
      restartPolicy: OnFailure
---
apiVersion: v1
metadata:
  name: minio-config
  namespace: kubeless
data:
  maxFileSize: 50Mi
  maxFuncHistory: "10"
kind: ConfigMap
