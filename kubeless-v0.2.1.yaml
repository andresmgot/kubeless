---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  labels:
    kubeless: controller
  name: kubeless-controller
  namespace: kubeless
spec:
  selector:
    matchLabels:
      kubeless: controller
  template:
    metadata:
      labels:
        kubeless: controller
    spec:
      containers:
      - image: andresmgot/kubeless-controller:12
        imagePullPolicy: IfNotPresent
        name: kubeless-controller
      serviceAccountName: controller-acct
---
apiVersion: apiextensions.k8s.io/v1beta1
description: Kubernetes Native Serverless Framework
kind: CustomResourceDefinition
metadata:
  name: functions.k8s.io
spec:
  group: k8s.io
  names:
    kind: Function
    plural: functions
    singular: function
  scope: Namespaced
  version: v1
---
apiVersion: v1
kind: Service
metadata:
  name: broker
  namespace: kubeless
spec:
  clusterIP: None
  ports:
  - port: 9092
  selector:
    kubeless: kafka
---
apiVersion: v1
kind: Service
metadata:
  name: kafka
  namespace: kubeless
spec:
  ports:
  - port: 9092
  selector:
    kubeless: kafka
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: controller-acct
  namespace: kubeless
---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: kafka
  namespace: kubeless
spec:
  serviceName: broker
  template:
    metadata:
      labels:
        kubeless: kafka
    spec:
      containers:
      - env:
        - name: KAFKA_ADVERTISED_HOST_NAME
          value: broker.kubeless
        - name: KAFKA_ADVERTISED_PORT
          value: "9092"
        - name: KAFKA_PORT
          value: "9092"
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: zookeeper.kubeless:2181
        - name: ALLOW_PLAINTEXT_LISTENER
          value: "yes"
        image: bitnami/kafka@sha256:ef0b1332408c0361d457852622d3a180f3609b9d98f1a85a9a809adaecfe9b52
        imagePullPolicy: IfNotPresent
        livenessProbe:
          initialDelaySeconds: 30
          tcpSocket:
            port: 9092
        name: broker
        ports:
        - containerPort: 9092
        volumeMounts:
        - mountPath: /bitnami/kafka/data
          name: datadir
  volumeClaimTemplates:
  - metadata:
      name: datadir
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: zoo
  namespace: kubeless
spec:
  clusterIP: None
  ports:
  - name: peer
    port: 9092
  - name: leader-election
    port: 3888
  selector:
    kubeless: zookeeper
---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: zoo
  namespace: kubeless
spec:
  serviceName: zoo
  template:
    metadata:
      labels:
        kubeless: zookeeper
    spec:
      containers:
      - env:
        - name: ZOO_SERVERS
          value: server.1=zoo-0.zoo:2888:3888:participant
        - name: ALLOW_ANONYMOUS_LOGIN
          value: "yes"
        image: bitnami/zookeeper@sha256:f66625a8a25070bee18fddf42319ec58f0c49c376b19a5eb252e6a4814f07123
        imagePullPolicy: IfNotPresent
        name: zookeeper
        ports:
        - containerPort: 2181
          name: client
        - containerPort: 2888
          name: peer
        - containerPort: 3888
          name: leader-election
        volumeMounts:
        - mountPath: /bitnami/zookeeper
          name: zookeeper
      volumes:
      - name: zookeeper
---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper
  namespace: kubeless
spec:
  ports:
  - name: client
    port: 2181
  selector:
    kubeless: zookeeper
---
# Source: minio/templates/minio_secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: minio-minio-user
  labels:
    app: minio-minio
    chart: "minio-0.1.0"
    release: "minio"
    heritage: "Tiller"
type: Opaque
data:
  accesskey: Zm9vYmFy
  secretkey: Zm9vYmFyZm9v
---
# Source: minio/templates/minioconfig_configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: minio-minio-config-cm
  labels:
    app: minio-minio
    chart: "minio-0.1.0"
    release: "minio"
    heritage: "Tiller"
data:
  config.json: |-
    {
      "version": "13",
      "credential": {
        "accessKey": "foobar",
        "secretKey": "foobarfoo"
      },
      "region": "us-east-1",
      "logger": {
        "console": {
          "enable": true,
          "level": "fatal"
        },
        "file": {
          "enable": false,
          "fileName": "",
          "level": ""
        }
      },
      "notify": {
        "amqp": {
          "1": {
            "enable": false,
            "url": "",
            "exchange": "",
            "routingKey": "",
            "exchangeType": "",
            "mandatory": false,
            "immediate": false,
            "durable": false,
            "internal": false,
            "noWait": false,
            "autoDeleted": false
          }
        },
        "nats": {
          "1": {
            "enable": false,
            "address": "",
            "subject": "",
            "username": "",
            "password": "",
            "token": "",
            "secure": false,
            "pingInterval": 0,
            "streaming": {
              "enable": false,
              "clusterID": "",
              "clientID": "",
              "async": false,
              "maxPubAcksInflight": 0
            }
          }
        },
        "elasticsearch": {
          "1": {
            "enable": false,
            "url": "",
            "index": ""
          }
        },
        "redis": {
          "1": {
            "enable": false,
            "address": "",
            "password": "",
            "key": ""
          }
        },
        "postgresql": {
          "1": {
            "enable": false,
            "connectionString": "",
            "table": "",
            "host": "",
            "port": "",
            "user": "",
            "password": "",
            "database": ""
          }
        },
        "kafka": {
          "1": {
            "enable": true,
            "brokers": ["kafka.kubeless:9092"],
            "topic": "s3"
          }
        },
        "webhook": {
          "1": {
            "enable": false,
            "endpoint": ""
          }
        }
      }
    }
---
# Source: minio/templates/minio_pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: minio-minio
  annotations:
    volume.alpha.kubernetes.io/storage-class: default
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "10Gi"
---
# Source: minio/templates/minio_svc.yaml
kind: Service
apiVersion: v1
metadata:
  name: minio-minio-svc
  labels:
    app: minio-minio
    chart: "minio-0.1.0"
    release: "minio"
    heritage: "Tiller"
spec:
  type: LoadBalancer
  loadBalancerIP:
  selector:
    app: minio-minio
  ports:
    - name: service
      port: 9000
      targetPort: 9000
      protocol: TCP
---
# Source: minio/templates/minio_deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: minio-minio
  labels:
    app: minio-minio
    chart: "minio-0.1.0"
    release: "minio"
    heritage: "Tiller"
spec:
  selector:
    matchLabels:
      app: minio-minio
  template:
    metadata:
      name: minio-minio
      labels:
        app: minio-minio
        chart: "minio-0.1.0"
        release: "minio"
        heritage: "Tiller"
    spec:
      volumes:
        - name: export
          persistentVolumeClaim:
            claimName: minio-minio
        - name: minio-server-config
          configMap:
            name: minio-minio-config-cm
        - name: minio-user
          secret:
            secretName: minio-minio-user
      containers:
        - name: minio
          image: minio/minio:RELEASE.2017-02-16T01-47-30Z
          imagePullPolicy: Always
          command: ["minio"]
          args: ["server", "/export"]
          volumeMounts:
            - name: export
              mountPath: /export
            - name: minio-server-config
              mountPath: "/root/.minio/"
          ports:
            - name: service
              containerPort: 9000
          env:
            - name: MINIO_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: minio-minio-user
                  key: accesskey
            - name: MINIO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: minio-minio-user
                  key: secretkey
          livenessProbe:
            tcpSocket:
              port: 9000
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
